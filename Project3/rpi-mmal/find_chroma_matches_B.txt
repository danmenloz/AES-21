find_chroma_matches() /home/pi/Documents/AES-21/Project3/rpi-mmal/build/istool1
Event: cpu-clock:uhH

Percent        
               
               
        3    Disassembly of section .text:
               
        5    00013640 <find_chroma_matches>:
        6    find_chroma_matches():
               
        39   void clear_term_screen(void) {
        40     printf("\033[2J");
        41   }          
               
        43   int find_chroma_matches(YUV_IMAGE_T * i, YUV_T * tc, int * rcx, int * rcy, int sep){
               push   {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               sub    sp, sp, #52     ; 0x34
               mov    r5, r0  
               ldr    r8, [sp, #88]   ; 0x58
               mov    r7, r1  
        49     #endif   
        50     int offsetX=0, offsetY=0;
        51     YUV_T color;
        52     int cx=0, cy=0;
               
        54     for (y = sep/2; y <= i->h - sep/2; y += sep) {
               ldr    r1, [r5, #4]
               add    r0, r8, r8, lsr #31
        38   int find_chroma_matches(YUV_IMAGE_T * i, YUV_T * tc, int * rcx, int * rcy, int sep){
               strd   r2, [sp, #32]
        49     for (y = sep/2; y <= i->h - sep/2; y += sep) {
               asr    r6, r0, #1
               rsb    r9, r6, #0
               add    r1, r1, r9
               cmp    r6, r1  
               str    r6, [sp, #24]
             ↓ bgt    1b4     
               ldr    r3, [r5]
        47     int cx=0, cy=0;
               mov    sl, #0  
               add    r3, r3, r9
        40     int matches=0;
               mov    fp, sl  
        47     int cx=0, cy=0;
               str    sl, [sp, #20]
        50       for (x = sep/2; x <= i->w - sep/2; x += sep) {
  0.03   4c:   ldr    r2, [sp, #24]
               cmp    r2, r3  
        70           if (highlight_matches){
        71             if (sep > 10)
        72               Draw_Rectangle(i, x, y, sep-2, sep-2, &pink, 0);
        73             else {
        74               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
        75               Draw_Line(i, x, y-sep/2, x, y+sep/2, &pink);
               addle  r3, r6, r9
               movle  r4, r2  
  0.05         strle  r3, [sp, #28]
        50       for (x = sep/2; x <= i->w - sep/2; x += sep) {
             ↓ ble    98      
             ↓ b      160     
        67               Draw_Rectangle(i, x, y, sep-2, sep-2, &pink, 0);
         68:   ldr    r3, [pc, #340]  ; 13804 <find_chroma_matches+0x1c4>
               str    lr, [sp, #8]
               str    r3, [sp, #4]
               str    ip, [sp]
               mov    r3, ip  
               mov    r1, r4  
             → bl     Draw_Rectangle
        50       for (x = sep/2; x <= i->w - sep/2; x += sep) {
 37.27   84:   ldr    r3, [r5]
               add    r4, r4, r8
               add    r3, r3, r9
               cmp    r3, r4  
  0.31       ↓ blt    158     
        51         Get_Pixel_yuv(i, x,y, & color);
  8.00   98:   add    r3, sp, #44     ; 0x2c
               mov    r2, r6  
               mov    r1, r4  
               mov    r0, r5  
  0.35       → bl     Get_Pixel_yuv
        57   Sq_UV_Difference_yuv():
               
        35   inline __attribute__((always_inline)) int Sq_UV_Difference_yuv(YUV_T * c1, YUV_T * c2){
        36     int du, dv;
               
        38     du = (int) c1->u - c2->u;
        39     dv = (int) c1->v - c2->v;
  0.90         ldrb   r1, [r7, #2]
 34.98         ldrb   r3, [sp, #46]   ; 0x2e
        33     du = (int) c1->u - c2->u;
  0.87         ldrb   r2, [sp, #45]   ; 0x2d
  7.59         ldrb   ip, [r7, #1]
        34     dv = (int) c1->v - c2->v;
               sub    r3, r3, r1
        36   find_chroma_matches():
        54         if (diff < color_threshold) {
  0.71         ldr    r1, [pc, #256]  ; 13808 <find_chroma_matches+0x1c8>
  7.77         ldrsh  r0, [r1]
        57   Sq_UV_Difference_yuv():
        35     return du*du + dv*dv;
               mul    r1, r3, r3
        33     du = (int) c1->u - c2->u;
               sub    r3, r2, ip
        35     return du*du + dv*dv;
               mla    r3, r3, r3, r1
        37   find_chroma_matches():
  0.71         cmp    r0, r3  
             ↑ ble    84      
        65           if (highlight_matches){
  0.27         ldr    r3, [pc, #232]  ; 1380c <find_chroma_matches+0x1cc>
        55           cx += x;
               ldr    r2, [sp, #20]
        56           cy += y;
               add    sl, sl, r6
        65           if (highlight_matches){
  0.04         ldr    r3, [r3]
        55           cx += x;
               add    r2, r2, r4
        65           if (highlight_matches){
               cmp    r3, #0  
        55           cx += x;
               str    r2, [sp, #20]
        64           matches++;
               add    fp, fp, #1
        65           if (highlight_matches){
             ↑ beq    84      
        69               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               ldr    r3, [sp, #24]
        66             if (sep > 10)
               cmp    r8, #10 
        69               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               add    r3, r3, r4
               add    r1, r4, r9
               mov    r2, r6  
               mov    r0, r5  
        67               Draw_Rectangle(i, x, y, sep-2, sep-2, &pink, 0);
               sub    ip, r8, #2
               mov    lr, #0  
        66             if (sep > 10)
             ↑ bgt    68      
        69               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               ldr    ip, [pc, #152]  ; 13804 <find_chroma_matches+0x1c4>
               stm    sp, {r6, ip}
             → bl     Draw_Line
        70               Draw_Line(i, x, y-sep/2, x, y+sep/2, &pink);
               ldr    r3, [sp, #24]
               ldr    ip, [pc, #136]  ; 13804 <find_chroma_matches+0x1c4>
               add    r3, r3, r6
               ldr    r2, [sp, #28]
               stm    sp, {r3, ip}
               mov    r1, r4  
               mov    r3, r4  
               mov    r0, r5  
             → bl     Draw_Line
             ↑ b      84      
  0.15  158:   ldr    r1, [r5, #4]
               add    r1, r1, r9
        49     for (y = sep/2; y <= i->h - sep/2; y += sep) {
        160:   add    r6, r6, r8
               cmp    r1, r6  
             ↑ bge    4c      
        76             }
        77           }  
        78         }    
        79       }      
        80     }        
        81     if (matches > 0) {
               cmp    fp, #0  
             ↓ beq    194     
        81   #if MIN_MAX_CENTROID
        82       cx = (max_x+min_x)/2;
        83       cy = (max_y+min_y)/2;
        84   #else      
        85       cx /= matches;
               ldr    r0, [sp, #20]
               mov    r1, fp  
             → bl     __aeabi_idiv
        82       cy /= matches;
               mov    r1, fp  
        81       cx /= matches;
               str    r0, [sp, #20]
        82       cy /= matches;
               mov    r0, sl  
             → bl     __aeabi_idiv
               mov    sl, r0  
        85   #endif     
        86     }        
        87     *rcx = cx;
        194:   ldr    r3, [sp, #32]
               ldr    r2, [sp, #20]
        89     *rcy = cy;
               
        91     return matches;
        92   }          
               mov    r0, fp  
        85     *rcx = cx;
               str    r2, [r3]
        86     *rcy = cy;
               ldr    r3, [sp, #36]   ; 0x24
               str    sl, [r3]
        89   }          
               add    sp, sp, #52     ; 0x34
               pop    {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        40     int matches=0;
        1b4:   mov    fp, #0  
        47     int cx=0, cy=0;
               mov    sl, fp  
               str    fp, [sp, #20]
             ↑ b      194     
               .word  0x000270b4
               .word  0x000270a6
               .word  0x000270ec
