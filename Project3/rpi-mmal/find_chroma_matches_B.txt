find_chroma_matches() /home/pi/Documents/AES-21/Project3/rpi-mmal/build/istool1
Event: cpu-clock:uhH

Percent        
               
               
        3    Disassembly of section .text:
               
        5    000137cc <find_chroma_matches>:
        6    find_chroma_matches():
               
        39   void clear_term_screen(void) {
        40     printf("\033[2J");
        41   }          
               
        43   int find_chroma_matches(YUV_IMAGE_T *restrict i, YUV_T *restrict tc, int *restrict rcx, int *restrict rcy, int sep){
               strd   r4, [sp, #-36]! ; 0xffffffdc
               strd   r6, [sp, #8]
               mov    r6, r1  
               strd   r8, [sp, #16]
               strd   sl, [sp, #24]
               str    lr, [sp, #32]
               sub    sp, sp, #68     ; 0x44
               ldr    r7, [sp, #104]  ; 0x68
               strd   r2, [sp, #48]   ; 0x30
        50     int offsetX=0, offsetY=0;
        51     YUV_T color;
        52     int cx=0, cy=0;
               
        54     int y_end = i->h - sep/2;
        55     int x_end = i->w - sep/2;
               ldr    r9, [r0]
        49     int y_end = i->h - sep/2;
               ldr    r3, [r0, #4]
               add    r2, r7, r7, lsr #31
               asr    r2, r2, #1
               rsb    r1, r2, #0
               add    r3, r1, r3
        50     int x_end = i->w - sep/2;
               add    r9, r1, r9
        49     int y_end = i->h - sep/2;
               str    r2, [sp, #24]
               
        53     for (y = sep/2; y <= y_end; y += sep) {
               cmp    r3, r2  
        49     int y_end = i->h - sep/2;
               str    r1, [sp, #36]   ; 0x24
        40     int matches=0;
               movlt  sl, #0  
        49     int y_end = i->h - sep/2;
               str    r3, [sp, #44]   ; 0x2c
        47     int cx=0, cy=0;
               movlt  fp, sl  
               strlt  sl, [sp, #16]
        52     for (y = sep/2; y <= y_end; y += sep) {
             ↓ blt    1d4     
               movw   r3, #32926      ; 0x809e
               movt   r3, #2  
        47     int cx=0, cy=0;
               mov    fp, #0  
               mov    r8, r0  
               mov    r5, r2  
        40     int matches=0;
               mov    sl, fp  
               str    r3, [sp, #20]
        68     min_y = MIN(min_y, y);
        69     max_y = MAX(max_y, y);
        70     #endif   
               
        72           matches++;
        73           if (highlight_matches){
               movw   r3, #32996      ; 0x80e4
               movt   r3, #2  
        47     int cx=0, cy=0;
               str    fp, [sp, #16]
        68           if (highlight_matches){
               str    r3, [sp, #28]
        72             if (sep > 10)
        73               Draw_Rectangle(i, x, y, sep-2, sep-2, &pink, 0);
        74             else {
        75               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               movw   r3, #32940      ; 0x80ac
               movt   r3, #2  
               str    r3, [sp, #32]
        53       for (x = sep/2; x <= x_end; x += sep) {
  0.03   98:   ldr    r3, [sp, #24]
               cmp    r9, r3  
             ↓ blt    1ac     
               mov    r4, r3  
        73               Draw_Line(i, x, y-sep/2, x, y+sep/2, &pink);
               ldr    r3, [sp, #36]   ; 0x24
               add    r3, r5, r3
               str    r3, [sp, #40]   ; 0x28
             ↓ b      e0      
        70               Draw_Rectangle(i, x, y, sep-2, sep-2, &pink, 0);
         b8:   ldr    r2, [sp, #32]
               mov    r3, ip  
               mov    r1, r4  
               str    ip, [sp]
               stmib  sp, {r2, lr}
               mov    r2, r5  
             → bl     Draw_Rectangle
        53       for (x = sep/2; x <= x_end; x += sep) {
 36.15   d4:   add    r4, r4, r7
               cmp    r9, r4  
             ↓ blt    1ac     
        54         Get_Pixel_yuv(i, x,y, & color);
  0.34   e0:   add    r3, sp, #60     ; 0x3c
               mov    r2, r5  
               mov    r1, r4  
               mov    r0, r8  
  7.74       → bl     Get_Pixel_yuv
        60   Sq_UV_Difference_yuv():
               
        35   inline __attribute__((always_inline)) int Sq_UV_Difference_yuv(YUV_T * c1, YUV_T * c2){
        36     int du, dv;
               
        38     du = (int) c1->u - c2->u;
        39     dv = (int) c1->v - c2->v;
  8.12         ldrb   r1, [r6, #2]
 29.44         ldrb   r3, [sp, #62]   ; 0x3e
        33     du = (int) c1->u - c2->u;
  1.52         ldrb   r2, [sp, #61]   ; 0x3d
  7.12         ldrb   ip, [r6, #1]
        34     dv = (int) c1->v - c2->v;
               sub    r3, r3, r1
        36   find_chroma_matches():
        57         if (diff < color_threshold) {
  0.75         ldr    r1, [sp, #20]
  7.72         ldrsh  r0, [r1]
        60   Sq_UV_Difference_yuv():
        35     return du*du + dv*dv;
               mul    r1, r3, r3
        33     du = (int) c1->u - c2->u;
               sub    r3, r2, ip
        35     return du*du + dv*dv;
               mla    r3, r3, r3, r1
        37   find_chroma_matches():
  0.60         cmp    r0, r3  
             ↑ ble    d4      
        58           cx += x;
  0.29         ldr    r2, [sp, #16]
        59           cy += y;
               add    fp, fp, r5
        67           matches++;
               add    sl, sl, #1
        68           if (highlight_matches){
  0.01         ldr    r3, [sp, #28]
        58           cx += x;
               add    r2, r2, r4
        68           if (highlight_matches){
  0.08         ldr    r3, [r3]
        58           cx += x;
               str    r2, [sp, #16]
        68           if (highlight_matches){
               cmp    r3, #0  
             ↑ beq    d4      
        72               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               ldr    r3, [sp, #24]
        69             if (sep > 10)
               cmp    r7, #10 
        72               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               mov    r0, r8  
        70               Draw_Rectangle(i, x, y, sep-2, sep-2, &pink, 0);
               sub    ip, r7, #2
               mov    lr, #0  
        72               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               ldr    r2, [sp, #36]   ; 0x24
               add    r3, r3, r4
               add    r1, r4, r2
               mov    r2, r5  
        69             if (sep > 10)
             ↑ bgt    b8      
        72               Draw_Line(i, x-sep/2, y, x+sep/2, y, &pink);
               ldr    ip, [sp, #32]
               stm    sp, {r5, ip}
             → bl     Draw_Line
        73               Draw_Line(i, x, y-sep/2, x, y+sep/2, &pink);
               ldr    r3, [sp, #24]
               mov    r1, r4  
               ldr    ip, [sp, #32]
               ldr    r2, [sp, #40]   ; 0x28
               add    r0, r5, r3
               mov    r3, r4  
        53       for (x = sep/2; x <= x_end; x += sep) {
               add    r4, r4, r7
        73               Draw_Line(i, x, y-sep/2, x, y+sep/2, &pink);
               stm    sp, {r0, ip}
               mov    r0, r8  
             → bl     Draw_Line
        53       for (x = sep/2; x <= x_end; x += sep) {
               cmp    r9, r4  
             ↑ bge    e0      
        52     for (y = sep/2; y <= y_end; y += sep) {
  0.09  1ac:   ldr    r3, [sp, #44]   ; 0x2c
               add    r5, r5, r7
               cmp    r3, r5  
             ↑ bge    98      
        79             }
        80           }  
        81         }    
        82       }      
        83     }        
        84     if (matches > 0) {
               cmp    sl, #0  
             ↓ beq    1d4     
        84   #if MIN_MAX_CENTROID
        85       cx = (max_x+min_x)/2;
        86       cy = (max_y+min_y)/2;
        87   #else      
        88       cx /= matches;
               ldr    r3, [sp, #16]
        85       cy /= matches;
               sdiv   fp, fp, sl
        84       cx /= matches;
               sdiv   r3, r3, sl
               str    r3, [sp, #16]
        88   #endif     
        89     }        
        90     *rcx = cx;
        1d4:   ldr    r2, [sp, #16]
        92     *rcy = cy;
               
        94     return matches;
        95   }          
               mov    r0, sl  
        88     *rcx = cx;
               ldr    r3, [sp, #48]   ; 0x30
               str    r2, [r3]
        89     *rcy = cy;
               ldr    r3, [sp, #52]   ; 0x34
               str    fp, [r3]
        92   }          
               add    sp, sp, #68     ; 0x44
               ldrd   r4, [sp]
               ldrd   r6, [sp, #8]
               ldrd   r8, [sp, #16]
               ldrd   sl, [sp, #24]
               add    sp, sp, #32
               pop    {pc}            ; (ldr pc, [sp], #4)
